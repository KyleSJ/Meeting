package kr.co.hucloud.batch.job.matching;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.springframework.scheduling.quartz.QuartzJobBean;

import kr.co.hucloud.batch.job.matching.service.MatchingService;
import kr.co.hucloud.batch.job.matching.vo.MatchingObject;
import kr.co.hucloud.batch.job.matching.vo.MatchingTeamMemberVO;
import kr.co.hucloud.batch.job.matching.vo.MatchingTeamVO;
import kr.co.hucloud.batch.job.matching.vo.MemberVO;
import kr.co.hucloud.batch.job.matching.vo.SimilarObject;
import kr.co.hucloud.batch.tool.HuCloudContext;

public class MatchingJob extends QuartzJobBean {

	private MatchingService matchingService;

	@Override
	protected void executeInternal(JobExecutionContext context) throws JobExecutionException {

		matchingService = HuCloudContext.getBean("matchingService");
		System.out.println("matching job call");
		List<MemberVO> femaleMember = matchingService.readAllFemale();
		List<MemberVO> maleMember = matchingService.readAllMale();
		Random random = new Random();

		int femaleCount = femaleMember.size();
		int maleCount = maleMember.size();
		List<Integer> matchedFemale = new ArrayList<>();
		List<Integer> matchedMale = new ArrayList<>();
		System.out.println(femaleCount);
		System.out.println(maleCount);

		if (femaleCount > 0 && maleCount > 0) {
			if (femaleCount >= maleCount) {
				for (int i = 0; i < femaleCount; i++) {
					int j= random.nextInt(femaleCount);
					while(matchedFemale.contains(j)) {
						j=random.nextInt(femaleCount);
					}
					matchedFemale.add(j);
					int k= random.nextInt(maleCount);
					while(matchedMale.contains(j)) {
						k=random.nextInt(maleCount);
					}
					matchedMale.add(k);
					matchingService.createSoloMatching(
							femaleMember.get(j).getMemberId()
							, maleMember.get(k).getMemberId());
				}
			} else {
				for (int i = 0; i < maleCount; i++) {
					int j= random.nextInt(femaleCount);
					while(matchedFemale.contains(j)) {
						j=random.nextInt(femaleCount);
					}
					matchedFemale.add(j);
					int k= random.nextInt(maleCount);
					while(matchedMale.contains(j)) {
						k=random.nextInt(maleCount);
					}
					matchedMale.add(k);
					matchingService.createSoloMatching(
							femaleMember.get(j).getMemberId()
							, maleMember.get(k).getMemberId());
				}
			}
		}
		
		for(int teamNOP=2;teamNOP<6;teamNOP++) {
			List<MatchingTeamVO> femaleTeamList = matchingService.readAllTeamByGenderAndNOP("F",teamNOP);
			int femaleTeamListSize = femaleTeamList.size();
			for(int i=0; i<femaleTeamListSize; i++) {
				int matchingTeamId = femaleTeamList.get(i).getMatchingTeamId();
				List<MatchingTeamMemberVO> matchingTeamMemberVO = matchingService.readTeamMember(matchingTeamId);
				femaleTeamList.get(i).setMatchingTeamMemberVO(matchingTeamMemberVO);
				List<MatchingTeamMemberVO> teamMemberList = femaleTeamList.get(i).getMatchingTeamMemberVO();
				List<Integer> styleList = new ArrayList<>();
				List<Integer> preferStyleList = new ArrayList<>();
				for(int j=0; j<teamMemberList.size(); j++) {
					styleList.addAll(teamMemberList.get(j).getStyleList());
					preferStyleList.addAll(teamMemberList.get(j).getPreferStyleList());
				}
				femaleTeamList.get(i).setTeamStyleList(styleList);
				femaleTeamList.get(i).setTeamPreferStyleList(preferStyleList);
			}
			
			List<MatchingTeamVO> maleTeamList = matchingService.readAllTeamByGenderAndNOP("M",teamNOP);
			int maleTeamListSize = maleTeamList.size();
			for(int i=0; i<maleTeamListSize; i++) {
				int matchingTeamId = maleTeamList.get(i).getMatchingTeamId();
				List<MatchingTeamMemberVO> matchingTeamMemberVO = matchingService.readTeamMember(matchingTeamId);
				maleTeamList.get(i).setMatchingTeamMemberVO(matchingTeamMemberVO);
				List<MatchingTeamMemberVO> teamMemberList = maleTeamList.get(i).getMatchingTeamMemberVO();
				List<Integer> styleList = new ArrayList<>();
				List<Integer> preferStyleList = new ArrayList<>();
				for(int j=0; j<teamMemberList.size(); j++) {
					styleList.addAll(teamMemberList.get(j).getStyleList());
					preferStyleList.addAll(teamMemberList.get(j).getPreferStyleList());
				}
				maleTeamList.get(i).setTeamStyleList(styleList);
				maleTeamList.get(i).setTeamPreferStyleList(preferStyleList);
			}

			
			List<SimilarObject> similarTable = new ArrayList<>();
			for(int i=0; i<femaleTeamListSize; i++) {
				List<Integer> femaleTeamStyleList = femaleTeamList.get(i).getTeamStyleList();
				List<Integer> femaleTeamPreferStyleList = femaleTeamList.get(i).getTeamPreferStyleList();
				for(int j=0; j<maleTeamListSize; j++) {
					SimilarObject similarTmp = new SimilarObject();
					similarTmp.setIndexOfFemaleList(i);
					List<Integer> similarListFtoMTmp = new ArrayList<>();
					List<Integer> similarListMtoFTmp = new ArrayList<>();
					similarTmp.setIndexOfMaleList(j);
					List<Integer> maleTeamStyleList = maleTeamList.get(j).getTeamStyleList();
					similarListFtoMTmp = femaleTeamPreferStyleList;
					similarListFtoMTmp.retainAll(maleTeamStyleList);
					
					List<Integer> maleTeamPreferStyleList = maleTeamList.get(i).getTeamPreferStyleList();
					similarListMtoFTmp = femaleTeamStyleList;
					similarListMtoFTmp.retainAll(maleTeamPreferStyleList);
					similarTmp.setAll(i, j, similarListFtoMTmp.size(), similarListMtoFTmp.size());
					similarTable.add(i*femaleTeamListSize+j,similarTmp);
					System.out.println("similarTable i,j = ("+i+","+j+") : "+(
							similarTable.get(femaleTeamListSize*i+j).similar()));
				}
			}
			System.out.println("---------------------------");
			for(int i=0; i<femaleTeamListSize; i++) {
				for(int j=0; j<maleTeamListSize; j++ ) {
					System.out.println("i,j = "+i+","+j);
					System.out.println(similarTable.get(femaleTeamListSize*i+j).similar());
				}
			}
			
			int[][] matchingArray = new int[femaleTeamListSize][maleTeamListSize];
			List<Integer> matchingTable = new ArrayList<>();
			for(int i=0; i<femaleTeamListSize; i++ ) {
				int maxSimilar = 0;
				for(int j=0; j<maleTeamListSize; j++ ) {
					int similarFtoM = similarTable.get(femaleTeamListSize*i+j).getSimilarFtoM();
					int similarMtoF = similarTable.get(femaleTeamListSize*i+j).getSimilarMtoF();
					int similar = similarFtoM + similarMtoF;
					System.out.println("recheck similarTable ("+i+","+j+") = "+similar);
					if(similar > maxSimilar) {
						if(matchingTable.contains(j)) {
							System.out.println("matchingTable contains "+j);
							int existIndex = matchingTable.indexOf(j);
							System.out.println("existIndexOfJ = " + existIndex);
							int existMaxSimilar = similarTable.get(femaleTeamListSize*existIndex + j).getSimilarFtoM()
												+ similarTable.get(femaleTeamListSize*existIndex + j).getSimilarMtoF();
							System.out.println("similar = " + similar);
							System.out.println("existMaxSimilar = " + existMaxSimilar);
							if(similar >existMaxSimilar) {
								System.out.println("remove"+existIndex+","+j);
								matchingTable.remove(existIndex);
							}
						}
						maxSimilar = similar;
						System.out.println("add ("+i+","+j+") : "+similar);
						matchingTable.add(i, j);
						
					} else if(similar == maxSimilar) {
						if(similar == 0) {
							matchingTable.add(i, j);
						}else {
							int k = matchingTable.get(i);
							int maxSimilarFtoM = similarTable.get(femaleTeamListSize*i+k).getSimilarFtoM();
							if(similarFtoM > maxSimilarFtoM )	{
								matchingTable.add(i, j);
							}
						}
					}
				}
			}
			
			for(int i=0; i< matchingTable.size(); i++) {
				int indexOfFemaleList = i;
				int indexOfMaleList = matchingTable.get(i);
				int fMatchingTeamId = femaleTeamList.get(indexOfFemaleList).getMatchingTeamId();
				int mMatchingTeamId = maleTeamList.get(indexOfMaleList).getMatchingTeamId();
				matchingService.createTeamMatching(fMatchingTeamId, mMatchingTeamId, teamNOP);
			}
				
		}
		
	}
}
